// SPDX-License-Identifier: MIT
pragma solidity 0.8.26;

import {AccessControlEnumerable} from "@openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol";
import {Strings} from "@openzeppelin/contracts/utils/Strings.sol";

contract SDID is AccessControlEnumerable {
    using Strings for uint256;

    struct Attribute {
        bytes32 value;
        string valueType; // STRING, UINT, BOOL, HASH, ADDRESS, INT, FLOAT
        uint256 createdAt;
        uint256 updatedAt;
        uint256 validTo; //=> may be zero(max uint)
        address updatedBy; //=> required
    }

    struct DID {
        address userWallet; //redunded value
        uint256 validTo; // => ??? поки не знаємо що саме тут закладено
        uint256 updatedAt;
        bool blocked;
        address updatedBy;
        mapping(string => Attribute) attributes;
        string[] attributeList;
    }

    struct Linker {
        string UUID; // autogenerated timestamp+blockNumber
        address[] linkedAddresses; // +address of userWallet => addressMapping add this address => DID object in mapping by uID
    }

    mapping(string UUID => DID) userDID;
    mapping(address => Linker) addressMapping;

    bytes32 public constant WRITER_ROLE = keccak256("WRITER_ROLE");
    bytes32 public constant ATTRIBUTE_READER_ROLE = keccak256("ATTRIBUTE_READER_ROLE");

    error CantRevokeLastSuperAdmin();

    constructor() {
        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);
    }

    function _linkAddressToDID(address addrOld, address addrNew) internal {
        Linker storage link = addressMapping[addrOld];

        link.linkedAddresses.push(addrNew);

        for (uint256 i = 0; i < link.linkedAddresses.length; i++) {
            if (link.linkedAddresses[i] != addrOld) {
                addressMapping[link.linkedAddresses[i]] = link;
            }
        }
    }

    function _revokeRole(bytes32 role, address account) internal override returns (bool revoked) {
        if (role == DEFAULT_ADMIN_ROLE) {
            require(getRoleMemberCount(role) > 1, CantRevokeLastSuperAdmin());
        }
        revoked = super._revokeRole(role, account);
    }

    function _uuid() internal view returns (string memory) {
        return string.concat(block.timestamp.toString(), block.number.toString());
    }
}
